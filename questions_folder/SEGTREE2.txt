<div class="problem-statement mathjax-support" id="problem-statement">
          
          <span class="solution-visible-txt mathjax-support">All submissions for this problem are available.</span><h3 class=" mathjax-support"> Read problems statements in <a target="_blank" href="http://www.codechef.com/download/translated/SNCKFL16/mandarin/SEGTREE2.pdf" class=" mathjax-support">Mandarin Chinese</a>, <a target="_blank" href="http://www.codechef.com/download/translated/SNCKFL16/russian/SEGTREE2.pdf" class=" mathjax-support">Russian</a> and <a target="_blank" href="http://www.codechef.com/download/translated/SNCKFL16/vietnamese/SEGTREE2.pdf" class=" mathjax-support">Vietnamese</a> as well.</h3>


<p class=" mathjax-support">The segment tree is a data structure that is capable of processing different queries on the array in an efficient way.</p>

<p class=" mathjax-support">A segment tree is usually created with the following routine.</p>

<pre class=" mathjax-support"><tt class=" mathjax-support">createTree(left, right):
    currentNode = new node()
    currentNode-&gt;left = left
    currentNode-&gt;right = right
    currentNode-&gt;tag = 0
    if (left &lt; right):
        middle = (left + right) / 2
        currentNode-&gt;leftSon = createTree(left, middle)
        currentNode-&gt;rightSon = createTree(middle + 1, right)
    return currentNode
</tt>
</pre>       
<p class=" mathjax-support"></p>
<p class=" mathjax-support">The routine is called as:</p>
		
<pre class=" mathjax-support"><tt class=" mathjax-support">    root = init(1, N)</tt>
</pre>
<p class=" mathjax-support"></p>
            
<p class=" mathjax-support">Consider the following segment tree operations:</p>
<pre class=" mathjax-support"><tt class=" mathjax-support">changeSegtree(currentNode, left, right):
   currentNode-&gt;tag = 1

   if (left == currentNode-&gt;left) and (right == currentNode-&gt;right)
       return

   newRight = min(right, currentNode-&gt;leftSon-&gt;right)
   if (left &lt;= newRight):
       changeSegtree(currentNode-&gt;leftSon, left, newRight)

   newLeft = max(left, currentNode-&gt;rightSon-&gt;left)
   if (newLeft &lt;= right):
       changeSegtree(currentNode-&gt;rightSon, newLeft, right)

                
change(left, right):
    changeSegtree(root, left, right)</tt>
</pre>
<p class=" mathjax-support"></p>

<p class=" mathjax-support">Finally, an in-order traversal of the tree can be done with the following routine:</p>

<pre class=" mathjax-support"><tt class=" mathjax-support">traverse(currentNode):
    if (currentNode-&gt;leftSon != NULL)
        traverse(currentNode-&gt;leftSon)
    print currentNode-&gt;tag
    if (currentNode-&gt;rightSon != NULL)
        traverse(currentNode-&gt;rightSon)


traverse(root)</tt>
</pre>
<p class=" mathjax-support"></p>

<p class=" mathjax-support">You are given the value of <b class=" mathjax-support">N</b>, denoting the length of the array on which the segment tree is built on (i.e. the second parameter to the init routine). You are also given <b class=" mathjax-support">M</b> integers <b class=" mathjax-support">T<sub class=" mathjax-support">1</sub></b>, <b class=" mathjax-support">T<sub class=" mathjax-support">2</sub></b>, ..., <b class=" mathjax-support">T<sub class=" mathjax-support">M</sub></b>. Here, <b class=" mathjax-support">M</b> is the number of nodes in the segment tree and you'll have calculate it by yourself.</p>

<p class=" mathjax-support">Your task is to find the minimum number of <b class=" mathjax-support">non-overlapping</b> segments, so that after calling the <b class=" mathjax-support">change</b> routine for each of these segments successively, on a newly created segment tree, the <b class=" mathjax-support">traverse</b> routine will output <b class=" mathjax-support">T<sub class=" mathjax-support">1</sub></b>, <b class=" mathjax-support">T<sub class=" mathjax-support">2</sub></b>, ..., <b class=" mathjax-support">T<sub class=" mathjax-support">M</sub></b>, or state that such a set of segments doesn't exist.</p>

<p class=" mathjax-support">Two segments <b class=" mathjax-support">(l<sub class=" mathjax-support">1</sub>,r<sub class=" mathjax-support">1</sub>)</b> and <b class=" mathjax-support">(l<sub class=" mathjax-support">2</sub>,r<sub class=" mathjax-support">2</sub>)</b> are considered <b class=" mathjax-support">overlapping</b> if there is some <b class=" mathjax-support">i</b> such that <b class=" mathjax-support">l<sub class=" mathjax-support">1</sub> ≤ i ≤ r<sub class=" mathjax-support">1</sub></b> and <b class=" mathjax-support">l<sub class=" mathjax-support">2</sub>&nbsp;≤&nbsp;i&nbsp;≤&nbsp;r<sub class=" mathjax-support">2</sub></b>.</p>

<h3 class=" mathjax-support">Input</h3>
<p class=" mathjax-support">The first line of the input contains an integer <b class=" mathjax-support">T</b> denoting the number of test cases. The description of <b class=" mathjax-support">T</b> test cases follows.</p>

<p class=" mathjax-support">The first line of each test case contains a single integer <b class=" mathjax-support">N</b> denoting the length of segment tree range.</p>

<p class=" mathjax-support">The second line contains <b class=" mathjax-support">M</b> space-separated integers <b class=" mathjax-support">T<sub class=" mathjax-support">1</sub></b>, <b class=" mathjax-support">T<sub class=" mathjax-support">2</sub></b>, ..., <b class=" mathjax-support">T<sub class=" mathjax-support">M</sub></b> denoting what the tags of the segment tree's nodes should be, in in-order traversal. Here, <b class=" mathjax-support">M</b> is the number of nodes in the segment tree.</p>

<h3 class=" mathjax-support">Output</h3>
<p class=" mathjax-support">For each test case, output a single line containing the minimum number of segments to modify. In case it's impossible to achieve the given configuration of tags, output <b class=" mathjax-support">-1</b>.
</p>

<h3 class=" mathjax-support">Constraints</h3>
<p class=" mathjax-support">
</p><ul class=" mathjax-support">
<li class=" mathjax-support"><b class=" mathjax-support">1</b> ≤ <b class=" mathjax-support">T</b> ≤ <b class=" mathjax-support">5 × 10<sup class=" mathjax-support">4</sup></b></li>
<li class=" mathjax-support"><b class=" mathjax-support">1</b> ≤ <b class=" mathjax-support">N</b> ≤ <b class=" mathjax-support">10<sup class=" mathjax-support">5</sup></b></li>
<li class=" mathjax-support"><b class=" mathjax-support">1</b> ≤ <b class=" mathjax-support">Sum of N</b> ≤ <b class=" mathjax-support">5 × 10<sup class=" mathjax-support">5</sup></b></li>
</ul>
<p class=" mathjax-support"></p>

<h3 class=" mathjax-support">Example</h3>
<pre class=" mathjax-support"><b class=" mathjax-support">Input:</b>
<tt class=" mathjax-support">2
2
1 1 1
2
1 0 1</tt>

<b class=" mathjax-support">Output:</b>
<tt class=" mathjax-support">2
-1</tt>
</pre>

<h3 class=" mathjax-support">Explanation</h3>
<p class=" mathjax-support"><b class=" mathjax-support">Example case 1.</b> We can call <b class=" mathjax-support">change(1, 1)</b> and <b class=" mathjax-support">change(2, 2)</b>.</p>

<p class=" mathjax-support"><b class=" mathjax-support">Example case 2.</b> There is no set of segments that would give the tree with such configuration of tags.</p>
        

        <!--.problem-statement-->

        <aside class="problem-info mathjax-support">
          
          
          <p class=" mathjax-support">
            <label class=" mathjax-support">Author:</label>
            <span class=" mathjax-support"><a href="/users/xcwgf666" data-bindattr-280="280" class=" mathjax-support"><span class="rating mathjax-support" style="display: inline-block; 
                    font-size: 10px; 
                    background: #FF7F00;
                    padding: 0 3px; 
                    line-height: 1.3; 
                    color: white;
                    margin-right: 2px;">6★</span><span class=" mathjax-support">xcwgf666</span></a></span>
          </p>
             
          <p class=" mathjax-support">
            <label class=" mathjax-support">Tags:</label>
            <span class=" mathjax-support"><a class="problem-tag-small  mathjax-support" href="/tags/problems/xcwgf666">xcwgf666</a></span>
          </p>
           
          <p class=" mathjax-support">
            <label class=" mathjax-support">Date Added:</label>
            <span class=" mathjax-support">23-05-2016</span>
          </p>
          
          <p class=" mathjax-support">
            <label class=" mathjax-support">Time Limit:</label>
            <span class=" mathjax-support">1 secs</span>
          </p>
          <p class=" mathjax-support">
            <label class=" mathjax-support">Source Limit:</label>
            <span class=" mathjax-support">50000 Bytes</span>
          </p>
          <p class=" mathjax-support">
            <label class=" mathjax-support">Languages:</label>
            <span class=" mathjax-support">C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, PYP3, CLOJ, FS</span>
          </p>
        </aside>
        <!--.problem-info-->

        <div class="text-center mathjax-support">
          <input type="hidden" value="value" data-bindattr-279="279" class=" mathjax-support">
          
          <a class="button blue mathjax-support" href="/submit/SEGTREE2" data-bindattr-284="284" style="padding:0.4rem 1.5rem 0.425rem;">Submit</a>
          
          </div>
        </div>